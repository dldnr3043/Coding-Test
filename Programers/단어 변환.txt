class Solution {
    
    static boolean[] visited;
    int answer = 0;
    
    public int solution(String begin, String target, String[] words) {
        visited = new boolean[words.length];
        
        dfs(0, target, words, begin);
        
        return answer;
    }
    
    public void dfs(int depth, String target, String[] words, String node)
    {
        if(node.equals(target)) answer = depth;
        
        for(int i=0;i<words.length;i++) {
            // 1개 알파벳만 다른 words[i]를 찾음
            int count = 0;
            for(int j=0;j<node.length();j++)
                if(node.charAt(j) == words[i].charAt(j)) count++;
            
            // 찾은 words[i]를 방문한 적이 없다면
            if(!visited[i] && count == node.length()-1) {
                visited[i] = true;
                dfs(depth+1, target, words, words[i]);
                visited[i] = false;
            }
        }
    }
    
}